@layout AdminLayout

@page "/admin/wechat/message"

@namespace Woa.Webapp.Pages.Admin

@attribute [Authorize]

@inject IWechatMessageApi WechatMessageApi

<PageTitle>消息管理</PageTitle>

<div>
    <PageContainer>
        <Breadcrumb>
            <Breadcrumb>
                <BreadcrumbItem>首页</BreadcrumbItem>
                <BreadcrumbItem>公众号</BreadcrumbItem>
                <BreadcrumbItem>消息管理</BreadcrumbItem>
            </Breadcrumb>
        </Breadcrumb>

        <ChildContent>
            <Card Title="消息列表">
                <Extra>
                    <Search Placeholder="输入关键字搜索" OnSearch="OnSearchRequestedAsync" />
                </Extra>
                <ChildContent>
                    <AntList TItem="WechatMessageItemDto" ItemLayout="ListItemLayout.Horizontal" DataSource="Items">
                        <ListItem>
                            <ListItemMeta>
                                <TitleTemplate>
                                    <span>@context.TypeName</span>
                                </TitleTemplate>
                                <DescriptionTemplate>
                                    @switch (context.Type)
                                    {
                                        case "Text":
                                        case "Voice":
                                        case "Event":
                                        case "Location":
                                        case "Link":
                                            <span>@context.Content</span>
                                            break;
                                        case "Image":
                                            <a href="@context.Content" target="_blank">查看图片</a>
                                            break;
                                    }
                                </DescriptionTemplate>
                            </ListItemMeta>
                            <div class="listContent">
                                @* <div class="listContentItem">
                                <span>Owner</span>
                                <p>@context.Owner</p>
                                </div> *@
                                <div class="listContentItem">
                                    <span>发送时间</span>
                                    <p>@context.CreateTime.ToString("yyyy-MM-dd HH:mm")</p>
                                </div>
                            </div>
                        </ListItem>
                    </AntList>
                </ChildContent>
                <ActionTemplate>
                    <div style="padding: 16px; text-align: center;">
                        <Pagination PageIndex="@CurrentPage" Total="@TotalCount" PageSize="10"
                            OnChange="OnPageChangeAsync" />
                    </div>
                </ActionTemplate>
            </Card>
        </ChildContent>
    </PageContainer>
</div>

@code {

    private readonly ListGridType _listGridType = new ListGridType
        {
            Gutter = 16,
            Xs = 1,
            Sm = 2,
            Md = 3,
            Lg = 3,
            Xl = 4,
            Xxl = 4
        };

    private string Keyword { get; set; }

    private int TotalCount { get; set; }

    private int CurrentPage { get; set; } = 1;

    private WechatMessageQueryDto Condition { get; } = new();

    private ObservableRangeCollection<WechatMessageItemDto> Items { get; } = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await SearchAsync();
    }

    private async Task SearchAsync()
    {
        await InvokeAsync(async () =>
        {
            await WechatMessageApi.SearchAsync(Condition, CurrentPage, 10)
    .ContinueWith(task =>
    {
    var result = task.Result.EnsureSuccess();
    Items.ReplaceRange(result);
            });
            if (CurrentPage == 1)
            {
                await WechatMessageApi.CountAsync(Condition)
    .ContinueWith(task =>
    {
        var result = task.Result.EnsureSuccess();
        TotalCount = result;
    });
            }
        });
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnSearchRequestedAsync(string args)
    {
        CurrentPage = 1;
        await SearchAsync();
    }

    private async Task OnPageChangeAsync(PaginationEventArgs args)
    {
        CurrentPage = args.Page;
        await SearchAsync();
    }
}